#include <Wire.h>
#include <ICM_20948.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>

// BLE UUIDs
#define SERVICE_UUID        "12345678-1234-5678-1234-56789abcdef0"
#define CHARACTERISTIC_UUID "abcdef01-1234-5678-1234-56789abcdef0"

ICM_20948_I2C imu;
BLECharacteristic *pCharacteristic;
bool deviceConnected = false;

// Kalman Filter class
class SimpleKalmanFilter {
  float est, errEst, errMeas, q;
public:
  SimpleKalmanFilter(float mea_e, float est_e, float q) {
    errMeas = mea_e;
    errEst = est_e;
    this->q = q;
    est = 0;
  }
  float update(float mea) {
    float kalmanGain = errEst / (errEst + errMeas);
    est = est + kalmanGain * (mea - est);
    errEst = (1.0 - kalmanGain) * errEst + fabs(est - mea) * q;
    return est;
  }
};

// Kalman Filters
SimpleKalmanFilter kfX(0.02, 0.05, 0.01);
SimpleKalmanFilter kfY(0.02, 0.05, 0.01);
SimpleKalmanFilter kfZ(0.02, 0.05, 0.01);

// Constants
const int BUFFER_SIZE = 100;
String buffer[BUFFER_SIZE];
int bufferIndex = 0;

float lastAccMag = 0;
float lastAccX = 0, lastAccY = 0, lastAccZ = 0;
float lastPitch = 0, lastRoll = 0;

unsigned long lastTime = 0;
unsigned long triggerStartTime = 0;
bool triggerActive = false;
bool preBufferSent = false;

// Thresholds
const float JERK_THRESHOLD = 50000.0;
const float GYRO_Y_THRESHOLD = 250.0;
const float PITCH_THRESHOLD = 20.0;
const float ROLL_THRESHOLD = 10.0;
const float ACCEL_THRESHOLD = 700.0;
const unsigned long POST_TRIGGER_TIME = 1000;

class MyCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  }
  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    delay(100);
    pServer->getAdvertising()->start();
  }
};

void configureFSR() {
  Wire.beginTransmission(0x69);
  Wire.write(0x7F);  // REG_BANK_SEL_ADDR
  Wire.write(0x20);  // Select User Bank 2
  Wire.endTransmission();
  delay(10);

  Wire.beginTransmission(0x69);
  Wire.write(0x01); // GYRO_CONFIG_1_ADDR
  Wire.endTransmission(false);
  Wire.requestFrom(0x69, 1);
  byte gyroCfg = Wire.read();
  gyroCfg &= ~0b00000110;
  gyroCfg |= (0b11 << 1); // ±500 dps
  Wire.beginTransmission(0x69);
  Wire.write(0x01);
  Wire.write(gyroCfg);
  Wire.endTransmission();
  delay(10);

  Wire.beginTransmission(0x69);
  Wire.write(0x14); // ACCEL_CONFIG_ADDR
  Wire.endTransmission(false);
  Wire.requestFrom(0x69, 1);
  byte accelCfg = Wire.read();
  accelCfg &= ~0b00000110;
  accelCfg |= (0b11 << 1); // ±16g
  Wire.beginTransmission(0x69);
  Wire.write(0x14);
  Wire.write(accelCfg);
  Wire.endTransmission();
  delay(10);

  Wire.beginTransmission(0x69);
  Wire.write(0x7F);
  Wire.write(0x00);
  Wire.endTransmission();
  delay(10);
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  Wire.begin(6, 7);

  if (imu.begin(Wire, 0x69) != ICM_20948_Stat_Ok) {
    while (1);
  }

  configureFSR();

  BLEDevice::init("ESP32_IMU");
  BLEDevice::setMTU(200);
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_NOTIFY
  );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();

  BLEAdvertising *pAdvertising = pServer->getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->start();

  lastTime = millis();
}

void loop() {
  if (!deviceConnected || !imu.dataReady()) return;

  imu.getAGMT();
  unsigned long now = millis();
  float dt = (now - lastTime) / 1000.0;
  lastTime = now;

  float rawX = imu.accX();
  float rawY = imu.accY();
  float rawZ = imu.accZ();
  float gyroY = imu.gyrY();
  float magX = imu.accX();
  float magY = imu.accY();
  float magZ = imu.accZ();
  float accX = kfX.update(rawX);
  float accY = kfY.update(rawY);
  float accZ = kfZ.update(rawZ);

  float accMag = sqrt(accX * accX + accY * accY + accZ * accZ);
  float jerk = (accMag - lastAccMag) / dt;
  lastAccMag = accMag;

  float pitch = atan2(accY, accZ) * 180.0 / PI;
  float roll  = atan2(accX, accZ) * 180.0 / PI;
  float pitchRad = atan2(-accY, accZ);
  float rollrad = atan2(-accX , accZ);

  float yawRad = atan2(
    -magY * cos(rollrad) + magZ * sin(rollrad),
     magX * cos(pitchRad) +
     magY * sin(pitchRad) * sin(rollrad) +
     magZ * sin(pitchRad) * cos(rollrad)
  );
  float yaw = yawRad * 180.0 / PI;
  if (yaw  < 0 ) yaw +=360.0;
  if (pitch < 0) pitch += 360.0;
  if (roll < 0) roll += 360.0;

  float deltaX = accX - lastAccX;
  float deltaY = accY - lastAccY;
  float deltaZ = accZ - lastAccZ;
  float deltaMag = sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);
  lastAccX = accX;
  lastAccY = accY;
  lastAccZ = accZ;

  float pitchChange = fabs(pitch - lastPitch);
  float rollChange = fabs(roll - lastRoll);
  lastPitch = pitch;
  lastRoll = roll;

String data = "ACC:" + String(accX, 1) + "," + String(accY, 1) + "," + String(accZ, 1) +
                  " GYR:" + String(imu.gyrX(), 1) + "," + String(imu.gyrY(), 1) + "," + String(imu.gyrZ(), 1) +
                  " MAG:" + String(imu.magX(), 1) + "," + String(imu.magY(), 1) + "," + String(imu.magZ(), 1) +
                  " PITCH:" + String(pitch, 1) +  " ROLL:" + String(roll, 1) + " YAW:" + String(yaw, 1)  ;

  buffer[bufferIndex] = data;
  bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;

  bool trigger = (abs(jerk) > JERK_THRESHOLD && abs(gyroY) > GYRO_Y_THRESHOLD) &&
                 ((rollChange > ROLL_THRESHOLD && pitchChange > PITCH_THRESHOLD) && deltaMag > ACCEL_THRESHOLD);

  if (!triggerActive && trigger) {
    triggerActive = true;
    triggerStartTime = now;
    preBufferSent = false;
  }

  if (triggerActive) {
    if (!preBufferSent) {
      for (int i = bufferIndex; i < BUFFER_SIZE; i++) {
        Serial.println(buffer[i]);
        pCharacteristic->setValue(buffer[i].c_str());
        pCharacteristic->notify();
        delay(1);
      }
      for (int i = 0; i < bufferIndex; i++) {
        Serial.println(buffer[i]);
        pCharacteristic->setValue(buffer[i].c_str());
        pCharacteristic->notify();
        delay(1);
      }
      preBufferSent = true;
    }

    Serial.println(data);
    pCharacteristic->setValue(data.c_str());
    pCharacteristic->notify();

    if (now - triggerStartTime >= POST_TRIGGER_TIME) {
      triggerActive = false;
    }
  }

  delay(5); // ~200 Hz
}